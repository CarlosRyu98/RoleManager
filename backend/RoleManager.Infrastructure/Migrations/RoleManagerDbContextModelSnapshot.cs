// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoleManager.Infrastructure.Data;

#nullable disable

namespace RoleManager.Infrastructure.Migrations
{
    [DbContext(typeof(RoleManagerDbContext))]
    partial class RoleManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CharacterAlly", b =>
                {
                    b.Property<int>("AllyId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("AllyId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterAlly");
                });

            modelBuilder.Entity("CharacterRival", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("RivalId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "RivalId");

                    b.HasIndex("RivalId");

                    b.ToTable("CharacterRival");
                });

            modelBuilder.Entity("FactionAlly", b =>
                {
                    b.Property<int>("AllyId")
                        .HasColumnType("int");

                    b.Property<int>("FactionId")
                        .HasColumnType("int");

                    b.HasKey("AllyId", "FactionId");

                    b.HasIndex("FactionId");

                    b.ToTable("FactionAlly");
                });

            modelBuilder.Entity("FactionEnemy", b =>
                {
                    b.Property<int>("EnemyId")
                        .HasColumnType("int");

                    b.Property<int>("FactionId")
                        .HasColumnType("int");

                    b.HasKey("EnemyId", "FactionId");

                    b.HasIndex("FactionId");

                    b.ToTable("FactionEnemy");
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampaignId"));

                    b.Property<string>("CharacterIds")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DomainIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FactionIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("History")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LocationIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("QuestIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampaignId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"));

                    b.Property<string>("Backstory")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int?>("DomainId")
                        .HasColumnType("int");

                    b.Property<int?>("FactionId")
                        .HasColumnType("int");

                    b.Property<string>("Inventory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Languages")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Motivations")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalityTraits")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhysicalDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Proficiencies")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Quirks")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Race")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("DomainId");

                    b.HasIndex("FactionId");

                    b.HasIndex("LocationId");

                    b.ToTable("Characters");

                    b.HasDiscriminator().HasValue("Character");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Domain", b =>
                {
                    b.Property<int>("DomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DomainId"));

                    b.Property<int?>("CampaignId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CharacterIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FactionIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("History")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LocationIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Objectives")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DomainId");

                    b.HasIndex("CampaignId");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Faction", b =>
                {
                    b.Property<int>("FactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FactionId"));

                    b.Property<string>("Base")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("DomainId")
                        .HasColumnType("int");

                    b.Property<string>("History")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Objectives")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FactionId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("DomainId");

                    b.HasIndex("LeaderId")
                        .IsUnique()
                        .HasFilter("[LeaderId] IS NOT NULL");

                    b.ToTable("Factions");
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<int?>("CampaignId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CharacterIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("DomainId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LocationId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("DomainId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Quest", b =>
                {
                    b.Property<int>("QuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestId"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("QuestId");

                    b.HasIndex("CampaignId");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("RoleManager.Core.Entities.QuestStage", b =>
                {
                    b.Property<int>("StageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StageId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.HasKey("StageId");

                    b.HasIndex("QuestId");

                    b.ToTable("QuestStages");
                });

            modelBuilder.Entity("RoleManager.Core.Entities.CharacterEpic", b =>
                {
                    b.HasBaseType("RoleManager.Core.Entities.Character");

                    b.Property<int?>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<int?>("Charisma")
                        .HasColumnType("int");

                    b.Property<int?>("Constitution")
                        .HasColumnType("int");

                    b.Property<int?>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int?>("HitPoints")
                        .HasColumnType("int");

                    b.Property<int?>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int?>("Strength")
                        .HasColumnType("int");

                    b.Property<int?>("Wisdom")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("CharacterEpic");
                });

            modelBuilder.Entity("RoleManager.Core.Entities.CharacterNpc", b =>
                {
                    b.HasBaseType("RoleManager.Core.Entities.Character");

                    b.HasDiscriminator().HasValue("CharacterNpc");
                });

            modelBuilder.Entity("CharacterAlly", b =>
                {
                    b.HasOne("RoleManager.Core.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("AllyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoleManager.Core.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterRival", b =>
                {
                    b.HasOne("RoleManager.Core.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoleManager.Core.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("RivalId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FactionAlly", b =>
                {
                    b.HasOne("RoleManager.Core.Entities.Faction", null)
                        .WithMany()
                        .HasForeignKey("AllyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoleManager.Core.Entities.Faction", null)
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FactionEnemy", b =>
                {
                    b.HasOne("RoleManager.Core.Entities.Faction", null)
                        .WithMany()
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoleManager.Core.Entities.Faction", null)
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Character", b =>
                {
                    b.HasOne("RoleManager.Core.Entities.Campaign", null)
                        .WithMany("Characters")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoleManager.Core.Entities.Domain", null)
                        .WithMany("Characters")
                        .HasForeignKey("DomainId");

                    b.HasOne("RoleManager.Core.Entities.Faction", "Faction")
                        .WithMany("Members")
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RoleManager.Core.Entities.Location", null)
                        .WithMany("Characters")
                        .HasForeignKey("LocationId");

                    b.Navigation("Faction");
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Domain", b =>
                {
                    b.HasOne("RoleManager.Core.Entities.Campaign", null)
                        .WithMany("Domains")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Faction", b =>
                {
                    b.HasOne("RoleManager.Core.Entities.Campaign", null)
                        .WithMany("Factions")
                        .HasForeignKey("CampaignId");

                    b.HasOne("RoleManager.Core.Entities.Domain", null)
                        .WithMany("Factions")
                        .HasForeignKey("DomainId");

                    b.HasOne("RoleManager.Core.Entities.Character", "Leader")
                        .WithOne()
                        .HasForeignKey("RoleManager.Core.Entities.Faction", "LeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Location", b =>
                {
                    b.HasOne("RoleManager.Core.Entities.Campaign", null)
                        .WithMany("Locations")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoleManager.Core.Entities.Domain", "Domain")
                        .WithMany("Locations")
                        .HasForeignKey("DomainId");

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Quest", b =>
                {
                    b.HasOne("RoleManager.Core.Entities.Campaign", null)
                        .WithMany("Quests")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleManager.Core.Entities.QuestStage", b =>
                {
                    b.HasOne("RoleManager.Core.Entities.Quest", null)
                        .WithMany("Stages")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Campaign", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Domains");

                    b.Navigation("Factions");

                    b.Navigation("Locations");

                    b.Navigation("Quests");
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Domain", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Factions");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Faction", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Location", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("RoleManager.Core.Entities.Quest", b =>
                {
                    b.Navigation("Stages");
                });
#pragma warning restore 612, 618
        }
    }
}
